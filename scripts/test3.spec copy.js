// Generated by Selenium IDE

const { Test} = require('./bootctf.js');

//const {MyClass1} = require('./test.js')
const { Builder, By, Key, until, Capabilities, WebElement } = require('selenium-webdriver')
const assert = require('assert')
const firefox = require('selenium-webdriver/firefox');
const dossier = process.env.npm_config_dossier;
console.log("dossier", dossier)

console.log("Test", Test.value)
console.log("Test s", Test.mStatic())

t = new Test()
console.log("Test m", t.m())


async function wait(millis) {
  let promise = new Promise((resolve, reject) => {
    setTimeout(() => resolve("Hello World!"), millis)
  });
  let result = await promise;
}

async function logElements(elem, logTrace, second) {
  for (let i = 0; i < elem.length; i++) {
    el = elem[i]
    logTrace_ = logTrace + "[" + i + "]"
    //console.log(logTrace_ , el)
    id = await el.getAttribute("id")
    name_ = await el.getAttribute("name")
    console.log(logTrace_ + " Id", id)
    console.log(logTrace_ + " Name", name_)
    console.log("_________________________________________")
  }
  await wait(second * 1000)
}


async function debug(js, txt, second) {
  //js.executeScript("alert('" + txt + "')")
  js.executeScript("window.open('', '" + txt + "', 'width=200,height=100')")
  await wait(second * 1000)
  //window.open("", "MsgWindow", "width=200,height=100");
  //js.wait(until.alertIsPresent()).then(() => { js.switchTo().alert().accept(); });
}

describe('test3', function () {
  this.timeout(900000)
  let driver
  let vars

  let options = new firefox.Options().setPreference('security.tls.version.min', 1);

  beforeEach(async function () {
    //driver = await new Builder().forBrowser('firefox').build()
    driver = await new Builder().forBrowser('firefox')
      .setFirefoxOptions(options)
      .withCapabilities(Capabilities.firefox().set("acceptInsecureCerts", true))
      .build()

    vars = {}
  })
  afterEach(async function () {
    await driver.quit();
  })
  async function waitForWindow(timeout = 2) {
    await driver.sleep(timeout)
    const handlesThen = vars["windowHandles"]
    const handlesNow = await driver.getAllWindowHandles()
    if (handlesNow.length > handlesThen.length) {
      return handlesNow.find(handle => (!handlesThen.includes(handle)))
    }
    throw new Error("New window did not appear before timeout")
  }
  it('test3', async function () {
    // await driver.get("https://172.21.160.241/eflow/LoginServlet")

    await driver.get("https://172.21.160.241/eflow/LoginServlet")
    await wait(3000)
    await driver.findElement(By.id("txtUID")).sendKeys("20403680")
    await driver.findElement(By.id("txtPsw")).sendKeys("123457")
    vars["windowHandles"] = await driver.getAllWindowHandles()
    await driver.findElement(By.id("cmdConferma")).click()
    vars["W_ROOT"] = await waitForWindow(5000)
    vars["W_LOGIN"] = await driver.getWindowHandle()
    await driver.switchTo().window(vars["W_ROOT"])
    await wait(5000)
    //await driver.findElement(By.linkText("Working Tasks")).click()
    //await wait(8000)

    await driver.findElement(By.id("header")).click();
    // 18 | sendKeys | id=menuSearch | ${KEY_DOWN}
    await driver.findElement(By.id("menuSearch")).click();
    // 19 | sendKeys | id=menuSearch | ${KEY_ENTER}
    await driver.findElement(By.id("menuSearch")).sendKeys("Working");
    await wait(1000);
    await driver.findElement(By.id("menuSearch")).sendKeys(Key.DOWN);
    await driver.findElement(By.id("menuSearch")).sendKeys(Key.ENTER);
    await wait(5000);


    await driver.switchTo().frame(1)


    await driver.switchTo().frame(1)

    await driver.switchTo().frame(1)


    await driver.findElement(By.xpath("//img[@title=\'Search Dossier\']")).click()
    await wait(6000)
    await driver.switchTo().parentFrame()
    await driver.switchTo().frame(2)
    await driver.findElement(By.id("txtPratNumEsatto")).click()
    await driver.findElement(By.id("txtPratNumEsatto")).sendKeys(dossier) //867673
    //	await driver.findElement(By.id("txtPratNumEsatto")).sendKeys(dossierNumber)
    await driver.findElement(By.css("#cmdAvvio > .ui-button-text")).click()
    await driver.findElement(By.xpath("(//td[@id=\'cella\'])[4]")).click()
    await driver.findElement(By.xpath("(//td[@id=\'cella\'])[4]")).click()
    {
      const element = await driver.findElement(By.xpath("(//td[@id=\'cella\'])[4]"))
      await driver.actions({ bridge: true }).doubleClick(element).perform()
    }
    await wait(3000)
    //await debug(driver, "prova", 5)
    await driver.switchTo().defaultContent()


    frBody = await driver.findElement(By.id("frBody"));
    driver.switchTo().frame(frBody);

    elem = await driver.findElements(By.tagName("iframe"))


    elem2 = await driver.findElements(By.tagName("frame"))

    driver.switchTo().frame(1); // frame id = frMain

    driver.switchTo().frame(2) // frame name = MainForm

    driver.switchTo().frame(0) // frame id = Lista

    elemchild = await driver.findElement(By.css("td:nth-child(2)"))//.click()
    elemchild.click()

    await wait(3000)


    driver.switchTo().parentFrame()

    await wait(2000)

    driver.switchTo().frame(1); // frame name = BODY
    await wait(2000)
    flConfEmp = await driver.findElement(By.name("flConfEmp"))

    flConfEmp.click()

    await wait(2000)
    vars["windowHandles"] = await driver.getAllWindowHandles()
    await driver.findElement(By.css("td:nth-child(1) .sf_char_menu:nth-child(2) img")).click()
    vars["win7729"] = await waitForWindow(2000)
    await driver.switchTo().window(vars["win7729"])
    await wait(2000)
    html = await driver.findElement(By.css("html"))//.click()
    txt = await html.getText()
    console.log("html txt", txt)
    html.click()
    vars["var"] = await driver.findElements(By.xpath("//div[contains(.,'Warning: flConfEmp must be checked')]")).length
    console.log("POPUP", (txt === 'Warning: flConfEmp must be checked'))
    await wait(5000)
  })
})
